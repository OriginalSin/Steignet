{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.html"
  ],
  "sourcesContent": [
    "<div class=\"map\"></div>\r\n<Luma regl={regl} />\r\n\r\n<script>\r\n\tconst serverBase = window.serverBase || '//maps.kosmosnimki.ru/';\r\n\timport Luma from './Luma.html';\r\n\r\n\timport regl from 'regl';\r\n\timport mat4 from 'gl-mat4';\r\n\timport hsv2rgb from 'hsv2rgb';\r\n\r\n\tconst reglModules = {\r\n\t\tregl: regl,\r\n\t\tmat4: mat4,\r\n\t\thsv2rgb: hsv2rgb\r\n\t};\r\nwindow.reglModules = reglModules;\r\nvar rgb = [0, 0, 0, 1];\r\nhsv2rgb(300, 1, 1.0, rgb)\r\nconsole.log(rgb)\r\n\texport default {\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tregl: null,\r\n\t\t\t\tclasters: false,\r\n\t\t\t\tlayers: {},\r\n\t\t\t\tfilter: ''\r\n\t\t\t}\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\tcreateMap(it) {\r\n\t\t\t\tlet {clasters} = this.get();\r\n\t\t\t\t\tit = it || {};\r\n\t\t\t\tlet app = it.app || {},\r\n\t\t\t\t\tgmxMap = app.gmxMap || {},\r\n\t\t\t\t\tstate = it.state || {},\r\n\t\t\t\t\tcalendar = state.calendar || {},\r\n\t\t\t\t\tmapID = gmxMap.mapID || '946GH',\r\n\t\t\t\t\tapiKey = gmxMap.apiKey,\r\n\t\t\t\t\tpos = state.map ? state.map.position : {},\r\n\t\t\t\t\tsiaJSON = (location.hostname !== '127.0.0.1' && location.pathname.indexOf('/public/') === -1 ? './public/' : '') + 'data/box.json';\r\n\t\t\t\t\r\n\t\t\t\tfetch(siaJSON).then(function(response) {\r\n\t\t\t\t\t\treturn response.json();\r\n\t\t\t\t\t}).then(function(json) {\r\n\t\t\t\t\t\t// if(app.theme) {\r\n\t\t\t\t\t\t\t// document.body.classList.add(app.theme);\r\n\t\t\t\t\t\t// }\r\n\t\t\t\t\t\tif(L.leafletMap) {\r\n\t\t\t\t\t\t\tL.leafletMap.remove();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet node = document.getElementsByClassName('map')[0];\r\n\t\t\t\t\t\tlet tiles = L.tileLayer('https://tilessputnik.ru/{z}/{x}/{y}.png', {\r\n\t\t\t\t\t\t\tmaxZoom: 18\r\n\t\t\t\t\t\t\t// ,\r\n\t\t\t\t\t\t\t// attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors, <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>'\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tlet map = L.leafletMap = new L.Map(node, {\r\n\t\t\t\t\t\t\tsrs: 3857,\r\n\t\t\t\t\t\t\tlayers: [tiles],\r\n\t\t\t\t\t\t\tattributionControl: false,\r\n\t\t\t\t\t\t\tcenter: new L.LatLng(pos.y || 43.953282, pos.x || -78.252868),\r\n\t\t\t\t\t\t\t// center: new L.LatLng(pos.y || 0, pos.x || 90),\r\n\t\t\t\t\t\t\tzoom: pos.z || 8\r\n\t\t\t\t\t\t});//.on('zoomstart', this.zoomstart.bind(this));\r\n\t\t\t\t\t\tL.leafletMap.gmxControlsManager.init();\r\n\r\n\t\t\t\t\t\t// heatmap\r\n\t\t\t\t\t\tvar heatmap = window.heatmap = L.webGLHeatmap({\r\n\t\t\t\t\t\t\tsize: 30,\r\n\t\t\t\t\t\t\tunits: 'px', //'m',\r\n\t\t\t\t\t\t\talphaRange: 0.6\r\n\t\t\t\t\t\t}); \r\n\r\n\t\t\t\t\t\theatmap.setData(json.values.map(function(it) {\r\n\t\t\t\t\t\t\treturn [it[1], it[2], it[3] / 100];\r\n\t\t\t\t\t\t}));\r\n\r\n\t\t\t\t\t\t//map.addLayer(heatmap);\r\n\r\n\t\t\t\t\t\t// poi\r\n\t\t\t\t\t\tvar poi = window.poi = L.webGLPoints({\r\n\t\t\t\t\t\t\treglModules: reglModules,\r\n\t\t\t\t\t\t\tsize: 30,\r\n\t\t\t\t\t\t\tunits: 'px', //'m',\r\n\t\t\t\t\t\t\talphaRange: 0.6\r\n\t\t\t\t\t\t}); \r\n\t\t\t\t\t\t// json.values = [\r\n\t\t\t\t\t\t\t// [1, 0, 0],\r\n\t\t\t\t\t\t\t// [2, 45.0, 180]\r\n\t\t\t\t\t\t// ];\r\n\t\t\t\t\t\tvar WW = 40075016.685578496 / 2;\r\n\t\t\t\t\t\tpoi.setData(json.values.map(function(it) {\r\n\t\t\t\t\t\t\tvar latlng = L.latLng(it[1], it[2]),\r\n\t\t\t\t\t\t\t\tmerc = L.CRS.EPSG3857.project(latlng);\r\n\t\t\t\t\t\t\treturn [merc.x / WW, merc.y / WW];\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// map.addLayer(poi);\r\n\t\t\t\t\t\tL.marker([45.0, 180.0]).addTo(map);\r\n\r\n\t\t\t\t\t\tL.control.layers({\r\n\t\t\t\t\t\t\tOSM: tiles\r\n\t\t\t\t\t\t}, {\r\n\t\t\t\t\t\t\theat: heatmap,\r\n\t\t\t\t\t\t\tpoi: poi\r\n\t\t\t\t\t\t}, {collapsed: false}).addTo(map);\r\n\t\t\t\t\t}.bind(this));\r\n\t\t\t},\r\n\t\t\tzoomstart() {\r\n\t\t\t\tconsole.log('zoomstart', arguments);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tcomponents: {\r\n\t\t\tLuma\r\n\t\t},\r\n\r\n\t\tonstate({ changed, current, previous }) {\r\n\t\t\tconsole.log('map onstate', changed, current, previous);\r\n\t\t\tif (changed.urlParams && current.urlParams) {\r\n\t\t\t\tthis.createMap();\r\n\t\t\t}\r\n\t\t\t// if (changed.filter) {\r\n\t\t\t\t// this.setFilter(current.filter);\r\n\t\t\t// }\r\n\t\t\t// if (changed.clasters && this.markers) {\r\n\t\t\t\t// this.markers.options.disableClusteringAtZoom = current.clasters ? 16 : 0;\r\n\t\t\t\t// this.markers.clearLayers();\r\n\t\t\t\t// this.markers.addLayers(this.geoJsonLayer.getLayers());\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style>\r\n.map {\r\n    position: relative;\r\n    height: 484px;\r\n\twidth: 100%;\r\n\tmargin: 0 auto;\r\n}\r\n\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "AAyIA,IAAI,cAAC,CAAC,AACF,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,KAAK,CAChB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC"
}